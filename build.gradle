group 'hashcode.bali'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
}

def inputs = new File("${buildDir}/resources/main/input/").listFiles().findAll{it.isFile() && it.name.endsWith(".txt")}
inputs.each {
    input ->
        def fichierSansExtension = input.name.split("\\.")[0]
        tasks.create(name: "generate-$fichierSansExtension", type: BaliTask, group: 'hashcode') {
            inputFile input
            outputFile "${buildDir}/libs/${fichierSansExtension}.out.txt"
            classpath sourceSets.main.runtimeClasspath
            main = "hashcode.Main"
        }
}

class BaliTask extends JavaExec {
    def inputFile
    def outputFile
    @TaskAction
    void exec() {
        print "Input : ${inputFile}\n"
        standardInput = new FileInputStream(inputFile)
        standardOutput = new FileOutputStream(outputFile)
        super.exec()
        print "Output : ${outputFile}\n"
    }
}

task generateAll (group: 'hashcode') {
    inputs.each {
        dependsOn "generate-${it.name.split("\\.")[0]}"
    }
    dependsOn 'sourcesJar'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task download (type: Exec, group: 'hashcode') {
    def cmd = npmCommand('npm run download --prefix ../hash-code-2018-training/')
    commandLine cmd
}

task submit (type: Exec, group: 'hashcode') {
    dependsOn 'generateAll'
    def cmd = npmCommand('npm run upload --prefix ../hash-code-2018-training/')
    commandLine cmd
}

def npmCommand(def cmd) {
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        cmd =  'cmd /C '.concat(cmd)
    }
    cmd.split(' ')
}
