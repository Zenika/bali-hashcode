import java.nio.file.Files
import java.nio.file.Paths

group 'hashcode.sumba'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

def npmToolsDir = '../hash-code-tooling'
def npmRepoUrl = 'https://github.com/hgwood/hash-code-tooling/'
def solutionsDir = "${buildDir}/solutions"
def inputDir = "${buildDir}/resources/main/input/"

def inputFiles = new File(inputDir).listFiles().findAll{it.isFile() && it.name.endsWith(".txt")}
inputFiles.each {
    input ->
        def fichierName = input.name.split("\\.")
        if (fichierName[1] == "in") {
            def fichierSansExtension = fichierName[0]
            tasks.create(name: "generate-$fichierSansExtension", type: SumbaTask, group: 'hashcode') {
                inputFile input
                outputFile "${solutionsDir}/${fichierSansExtension}.out.txt"
                classpath sourceSets.main.runtimeClasspath
                main = "hashcode.Main"
            }
        }
}

class SumbaTask extends JavaExec {
    def inputFile
    def outputFile
    @TaskAction
    void exec() {
        print "Input : ${inputFile}\n"
        standardInput = new FileInputStream(inputFile)
        standardOutput = new FileOutputStream(outputFile)
        super.exec()
        print "Output : ${outputFile}\n"
    }
    //@InputFile
    def getInputFile() {
        return inputFile
    }

    //@OutputFile
    def getOutputFile() {
        return Paths.get(outputFile).toFile()
    }
}

task generateAll (group: 'hashcode') {
    inputFiles.each {
        dependsOn "generate-${it.name.split("\\.")[0]}"
    }
    dependsOn 'sourcesJar'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task download (type: Exec, group: 'hashcode') {
    workingDir npmToolsDir
    def cmd = commandExec('npm run download')
    commandLine cmd
}

task submit (type: Exec, group: 'hashcode') {
    inputs.files(fileTree(solutionsDir))
    outputs.files(fileTree(solutionsDir))
    //dependsOn 'generateAll'
    dependsOn 'sourcesJar'
    workingDir npmToolsDir
    def cmd = commandExec('npm run upload')
    commandLine cmd
}

task gitCloneHugoTool(type: Exec, group: 'hashcode init env') {
    workingDir '../'
    def cmd = commandExec("git clone $npmRepoUrl")
    commandLine cmd
}

task npmInstallHugoTool(type: Exec, group: 'hashcode init env') {
    workingDir npmToolsDir
    def cmd = commandExec('npm install')
    commandLine cmd
}

task createEnvFile(group: 'hashcode init env') {
    doLast {
        def token = ant.input(message: '> Veuillez entrer votre token: ',  addproperty: 'token')
        new File("${npmToolsDir}/.env").write("""\
            |HASH_CODE_JUDGE_AUTH_TOKEN=$ant.token
            |DOWNLOAD_DIR=../sumba-hashcode/src/main/resources/input/
            |BUILD_DIR=../sumba-hashcode/build/libs/
            |SOLUTION_DIR=../sumba-hashcode/build/solutions/
            |TAG_ON_UPLOAD=false
            """.stripMargin())
    }
}

task initHugoTool(type: GradleBuild, group: 'hashcode init env') {
    def tasks = []
    if (Files.notExists(Paths.get(buildDir.toString(), "solutions"))) {
        Files.createDirectories(Paths.get(buildDir.toString(), "solutions"))
    }
    if (Files.notExists(Paths.get(projectDir.toString(), npmToolsDir))) {
        tasks << 'gitCloneHugoTool'
    }
    tasks << 'npmInstallHugoTool' << 'createEnvFile'
    setTasks(tasks)
    /*dependsOn npmInstallHugoTool
    dependsOn createEnvFile
    tasks.*/
}

def commandExec(def cmd) {
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        cmd =  'cmd /C '.concat(cmd)
    }
    cmd.split(' ')
}
